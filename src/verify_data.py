#!/usr/bin/env python3
"""
Script utilitaire pour v√©rifier et analyser les donn√©es g√©n√©r√©es dans GCS
Usage: python verify_data.py [--sample] [--stats]
"""

import sys
import subprocess
import json
from datetime import datetime
from config import Config

def run_gcloud_command(command: str) -> str:
    """Ex√©cute une commande gcloud et retourne le r√©sultat"""
    try:
        result = subprocess.run(command.split(), capture_output=True, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'ex√©cution de: {command}")
        print(f"Erreur: {e.stderr}")
        return ""

def check_bucket_access():
    """V√©rifie l'acc√®s au bucket GCS"""
    print("üîç V√©rification de l'acc√®s au bucket...")
    
    # Test d'acc√®s au bucket
    result = run_gcloud_command(f"gcloud storage ls {Config.BUCKET_BASE}/")
    if result:
        print(f"‚úÖ Acc√®s au bucket {Config.BUCKET_BASE} confirm√©")
        return True
    else:
        print(f"‚ùå Impossible d'acc√©der au bucket {Config.BUCKET_BASE}")
        return False

def list_generated_files():
    """Liste les fichiers g√©n√©r√©s dans le dossier raw"""
    print(f"\nüìÅ Fichiers g√©n√©r√©s dans {Config.RAW_LOCATION}/")
    print("-" * 60)
    
    # Lister les fichiers CSV g√©n√©r√©s
    result = run_gcloud_command(f"gcloud storage ls {Config.RAW_LOCATION}/")
    if result:
        files = result.split('\n')
        csv_files = [f for f in files if f.endswith('.csv')]
        
        print(f"Nombre de fichiers CSV: {len(csv_files)}")
        for file in csv_files:
            # Obtenir la taille du fichier
            size_result = run_gcloud_command(f"gcloud storage du {file}")
            if size_result:
                size_info = size_result.split()[0]
                filename = file.split('/')[-1]
                print(f"  üìÑ {filename} - {size_info}")
        
        return csv_files
    else:
        print("‚ùå Aucun fichier trouv√© ou erreur d'acc√®s")
        return []

def get_total_size():
    """Calcule la taille totale des donn√©es g√©n√©r√©es"""
    print(f"\nüìä Taille totale des donn√©es dans {Config.RAW_LOCATION}/")
    print("-" * 60)
    
    result = run_gcloud_command(f"gcloud storage du --summarize {Config.RAW_LOCATION}/")
    if result:
        lines = result.split('\n')
        total_line = [line for line in lines if 'TOTAL:' in line or 'total:' in line]
        if total_line:
            print(f"Taille totale: {total_line[0]}")
    else:
        print("‚ùå Impossible de calculer la taille totale")

def sample_data():
    """Affiche un √©chantillon des donn√©es g√©n√©r√©es"""
    print(f"\nüîç √âchantillon des donn√©es (premi√®res lignes du premier fichier)")
    print("-" * 60)
    
    # Trouver le premier fichier CSV
    result = run_gcloud_command(f"gcloud storage ls {Config.RAW_LOCATION}/")
    if result:
        files = [f for f in result.split('\n') if f.endswith('.csv')]
        if files:
            first_file = files[0]
            print(f"Fichier √©chantillonn√©: {first_file.split('/')[-1]}")
            
            # T√©l√©charger les premi√®res lignes
            sample_result = run_gcloud_command(f"gcloud storage cat {first_file}")
            if sample_result:
                lines = sample_result.split('\n')[:11]  # Header + 10 lignes
                for i, line in enumerate(lines):
                    if i == 0:
                        print(f"Header: {line}")
                        print("-" * 80)
                    elif line.strip():
                        print(f"Ligne {i}: {line}")
            else:
                print("‚ùå Impossible de lire l'√©chantillon de donn√©es")
        else:
            print("‚ùå Aucun fichier CSV trouv√©")

def analyze_data_stats():
    """Analyse statistique basique des donn√©es"""
    print(f"\nüìà Analyse statistique des donn√©es")
    print("-" * 60)
    
    # Cette fonction n√©cessiterait de t√©l√©charger et traiter les donn√©es
    # Pour une version simple, on affiche les param√®tres de configuration
    print(f"Configuration utilis√©e:")
    print(f"  ‚Ä¢ Nombre de lignes cible: {Config.ESTIMATED_ROWS:,}")
    print(f"  ‚Ä¢ Nombre de fichiers: {Config.NUM_SHARDS}")
    print(f"  ‚Ä¢ Taille cible: {Config.TARGET_SIZE_GB} Go")
    print(f"  ‚Ä¢ P√©riode: {Config.START_DATE} + {Config.DATE_RANGE_DAYS} jours")
    print(f"  ‚Ä¢ Produits: {len(Config.PRODUITS)} ({', '.join(Config.PRODUITS)})")
    print(f"  ‚Ä¢ Types d'op√©rations: {len(Config.TYPES_OPERATIONS)}")
    print(f"  ‚Ä¢ Pays: {len(Config.PAYS)} ({', '.join(Config.PAYS)})")
    print(f"  ‚Ä¢ Agences: {len(Config.AGENCES)} (AG01 √† AG{len(Config.AGENCES):02d})")

def show_databricks_connection_info():
    """Affiche les informations de connexion pour Databricks"""
    print(f"\nüîó Informations de connexion Databricks")
    print("-" * 60)
    print(f"Chemin GCS pour Databricks:")
    print(f"  spark.read.option('header', 'true')")
    print(f"    .csv('{Config.RAW_LOCATION}/mouvements-*.csv')")
    print(f"\nChemin pour montage:")
    print(f"  /mnt/gcs{Config.RAW_LOCATION.replace('gs://', '/')}")

def main():
    """Fonction principale"""
    print("üöÄ V√©rification des donn√©es g√©n√©r√©es - Pipeline GCP/Databricks")
    print("=" * 70)
    
    # V√©rifier les arguments
    show_sample = "--sample" in sys.argv
    show_stats = "--stats" in sys.argv
    
    # V√©rification de l'acc√®s
    if not check_bucket_access():
        print("\n‚ùå V√©rifiez votre configuration gcloud et les permissions du bucket")
        sys.exit(1)
    
    # Lister les fichiers
    files = list_generated_files()
    
    if not files:
        print("\n‚ö†Ô∏è  Aucun fichier trouv√©. Le pipeline a-t-il √©t√© ex√©cut√© ?")
        sys.exit(1)
    
    # Taille totale
    get_total_size()
    
    # √âchantillon si demand√©
    if show_sample:
        sample_data()
    
    # Statistiques si demand√©
    if show_stats:
        analyze_data_stats()
    
    # Infos de connexion Databricks
    show_databricks_connection_info()
    
    print(f"\n‚úÖ V√©rification termin√©e - {len(files)} fichiers trouv√©s")
    print(f"üí° Utilisez --sample pour voir un √©chantillon des donn√©es")
    print(f"üí° Utilisez --stats pour voir les statistiques d√©taill√©es")

if __name__ == "__main__":
    main() 